// Flujo directo que funciona - basado en la versi√≥n anterior
// Este flujo usa el patr√≥n exacto de la versi√≥n que funcionaba

const { createFlow, addKeyword } = require('@builderbot/bot');

console.log('üîÑ [WORKING FLOW] Inicializando flujo directo...');

try {
  // Crear flujo principal con keywords espec√≠ficas
  const workingFlow = addKeyword(['hola', 'HOLA', 'hello', 'HELLO', 'inicio', 'INICIO', 'start', 'START'])
    .addAction(async (ctx, { state, flowDynamic }) => {
      console.log(`üéØ [WORKING FLOW] addAction ejecut√°ndose - usuario: ${ctx.from}`);
      
      // Setup inicial de variables
      await state.update({
        tenantId: ctx._metadata?.tenantId || 'default',
        sessionId: ctx._sessionId || 'default',
        salesStageId: 'nuevos',
        conversation_status: 'active',
        initialized: true
      });
      
      // Enviar mensaje de bienvenida
      await flowDynamic('ü§ñ ¬°Hola! Soy tu asistente virtual.\n\nEstoy aqu√≠ para ayudarte a agendar una cita con nosotros. üòä');
      
      console.log(`üéØ [WORKING FLOW] Bienvenida enviada`);
    })
    .addAnswer('Para comenzar, ¬øpodr√≠as compartirme tu nombre completo? üìù', 
      { capture: true }, 
      async (ctx, { state, flowDynamic }) => {
        console.log(`üéØ [WORKING FLOW] Nombre capturado: ${ctx.body}`);
        
        await state.update({ 
          nombre_lead: ctx.body, 
          cliente_nombre: ctx.body,
          has_nombre: true
        });
        
        await flowDynamic(`Perfecto ${ctx.body}! üëã\n\nAhora necesito tu n√∫mero de tel√©fono para confirmar la cita. üì±`);
      }
    )
    .addAnswer('_Espera tu n√∫mero de tel√©fono..._', 
      { capture: true }, 
      async (ctx, { state, flowDynamic }) => {
        console.log(`üéØ [WORKING FLOW] Tel√©fono capturado: ${ctx.body}`);
        
        await state.update({ 
          telefono: ctx.body,
          phone: ctx.body,
          has_telefono: true
        });
        
        // Obtener variables del estado
        const nombre = state.get?.('nombre_lead') || state.nombre_lead || ctx.body;
        const telefono = ctx.body;
        
        const mensajeFinal = 
          `‚úÖ *¬°Informaci√≥n recibida correctamente!*\n\n` +
          `üìã *Resumen:*\n` +
          `üë§ Nombre: ${nombre}\n` +
          `üì± Tel√©fono: ${telefono}\n\n` +
          `‚úÖ En breve un agente te contactar√° para confirmar tu cita.\n\n` +
          `¬°Muchas gracias por tu inter√©s!`;
        
        await flowDynamic(mensajeFinal);
        
        console.log(`üéØ [WORKING FLOW] Flujo completado exitosamente`);
      }
    );
  
  // Crear el flujo completo usando createFlow (como en la versi√≥n que funcionaba)
  const functionalFlow = createFlow([workingFlow]);
  
  // Asegurar que el flujo tenga los m√©todos necesarios
  if (!functionalFlow.findSerializeByKeyword && functionalFlow.flowSerialize) {
    functionalFlow.findSerializeByKeyword = function(keyword) {
      const result = this.flowSerialize?.find((item) => {
        if (Array.isArray(item.keyword)) {
          return item.keyword.some((kw) => kw.toLowerCase() === keyword.toLowerCase());
        }
        return false;
      });
      return result;
    };
  }
  
  if (!functionalFlow.findBySerialize && functionalFlow.flowSerialize) {
    functionalFlow.findBySerialize = function(serialized) {
      return this.flowSerialize?.find((item) => item.refSerialize === serialized);
    };
  }
  
  console.log('‚úÖ [WORKING FLOW] Flujo directo creado exitosamente');
  console.log('‚úÖ [WORKING FLOW] Keywords: hola, HOLA, hello, HELLO, inicio, INICIO, start, START');
  
  // Exportar para poder usar en templateConverter
  module.exports = {
    workingFlow,
    functionalFlow
  };
  
  // Tambi√©n exportar como ES modules para compatibilidad
  if (typeof exports !== 'undefined') {
    exports.workingFlow = workingFlow;
    exports.functionalFlow = functionalFlow;
  }
  
  console.log('‚úÖ [WORKING FLOW] Flujo listo para usar');
  
} catch (error) {
  console.error('‚ùå [WORKING FLOW] Error general:', error.message);
  console.error('‚ùå [WORKING FLOW] Stack:', error.stack);
}